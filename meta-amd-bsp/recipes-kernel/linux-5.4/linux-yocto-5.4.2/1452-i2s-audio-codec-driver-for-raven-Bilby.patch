From eea8a487232d1dddeb694e8c4184f88b239b00f5 Mon Sep 17 00:00:00 2001
From: Sudheesh Mavila <sudheesh.mavila@amd.com>
Date: Thu, 30 Jan 2020 11:33:47 +0530
Subject: [PATCH 1452/1453] i2s audio codec driver for raven ( Bilby )

Signed-off-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
---
 sound/soc/amd/raven/Makefile          |   4 +
 sound/soc/amd/raven/acp3x-dummy5102.c | 163 ++++++++++++++++++++++++++
 sound/soc/amd/raven/dummy-w5102.c     |  93 +++++++++++++++
 3 files changed, 260 insertions(+)
 mode change 100644 => 100755 sound/soc/amd/raven/Makefile
 create mode 100755 sound/soc/amd/raven/acp3x-dummy5102.c
 create mode 100755 sound/soc/amd/raven/dummy-w5102.c

diff --git a/sound/soc/amd/raven/Makefile b/sound/soc/amd/raven/Makefile
old mode 100644
new mode 100755
index 108d1acf189b..81d32e244a86
--- a/sound/soc/amd/raven/Makefile
+++ b/sound/soc/amd/raven/Makefile
@@ -2,5 +2,9 @@
 # Raven Ridge platform Support
 snd-pci-acp3x-objs	:= pci-acp3x.o
 snd-acp3x-pcm-dma-objs	:= acp3x-pcm-dma.o
+snd-soc-dummy-w5102-objs := dummy-w5102.o
+snd-soc-acp3x-mach-objs := acp3x-dummy5102.o
 obj-$(CONFIG_SND_SOC_AMD_ACP3x)	 += snd-pci-acp3x.o
 obj-$(CONFIG_SND_SOC_AMD_ACP3x)	 += snd-acp3x-pcm-dma.o
+obj-$(CONFIG_SND_SOC_AMD_ACP3x)	+= snd-soc-dummy-w5102.o
+obj-$(CONFIG_SND_SOC_AMD_ACP3x)	+= snd-soc-acp3x-mach.o
diff --git a/sound/soc/amd/raven/acp3x-dummy5102.c b/sound/soc/amd/raven/acp3x-dummy5102.c
new file mode 100755
index 000000000000..2d634e295149
--- /dev/null
+++ b/sound/soc/amd/raven/acp3x-dummy5102.c
@@ -0,0 +1,163 @@
+/*
+ * Machine driver for AMD ACP Audio engine using dummy codec
+ *
+ * Copyright 2016 Advanced Micro Devices, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ *
+ *
+ */
+
+#include <sound/soc.h>
+#include <sound/soc-dapm.h>
+#include <linux/module.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+
+static int acp3x_hw_params(struct snd_pcm_substream *substream,
+				struct snd_pcm_hw_params *params)
+
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+	unsigned int fmt;
+	unsigned int slot_width;
+	unsigned int channels;
+	int ret = 0;
+
+	fmt = params_format(params);
+	switch (fmt) {
+	case SNDRV_PCM_FORMAT_S16_LE:
+		slot_width = 16;
+		break;
+	case SNDRV_PCM_FORMAT_S24_LE:
+		slot_width = 32;
+		break;
+	case SNDRV_PCM_FORMAT_S32_LE:
+                slot_width = 32;
+		break;
+	default:
+		printk(KERN_WARNING "acp3x: unsupported PCM format");
+		return -EINVAL;
+      }
+
+      channels = params_channels(params);
+
+      if (channels == 0x04) {
+                ret = snd_soc_dai_set_tdm_slot(cpu_dai, 0x3, 0x3, 4, slot_width);
+                if (ret < 0)
+                       return ret;
+      } else {
+               ret = snd_soc_dai_set_tdm_slot(cpu_dai, 0x3, 0x3, 2, slot_width);
+               if (ret < 0)
+                       return ret;
+      }
+      return 0;
+}
+
+static struct snd_soc_ops acp3x_wm5102_ops = {
+	.hw_params = acp3x_hw_params,
+};
+
+SND_SOC_DAILINK_DEFS(pcm,
+	DAILINK_COMP_ARRAY(COMP_CPU("acp3x_rv_i2s.0")),
+	DAILINK_COMP_ARRAY(COMP_CODEC("dummy_w5102.0", "dummy_w5102_dai")),
+	DAILINK_COMP_ARRAY(COMP_PLATFORM("acp3x_rv_i2s.0")));
+
+static int acp3x_init(struct snd_soc_pcm_runtime *rtd)
+{
+	return 0;
+}
+
+static struct snd_soc_dai_link acp3x_dai_w5102[] = {
+	{
+		.name = "RV-W5102-PLAY",
+		.stream_name = "Playback",
+		.dai_fmt =     SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF
+				| SND_SOC_DAIFMT_CBM_CFM,
+		.ops = &acp3x_wm5102_ops,
+		.init = acp3x_init,
+		SND_SOC_DAILINK_REG(pcm),
+	},
+};
+
+static const struct snd_soc_dapm_widget acp3x_widgets[] = {
+	SND_SOC_DAPM_HP("Headphones", NULL),
+	SND_SOC_DAPM_MIC("Analog Mic", NULL),
+};
+
+static const struct snd_soc_dapm_route acp3x_audio_route[] = {
+	{"Headphones", NULL, "HPO L"},
+	{"Headphones", NULL, "HPO R"},
+	{"MIC1", NULL, "Analog Mic"},
+};
+
+static struct snd_soc_card acp3x_card = {
+	.name = "acp3x",
+	.owner = THIS_MODULE,
+	.dai_link = acp3x_dai_w5102,
+	.num_links = 1,
+};
+
+static int acp3x_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct acp_wm5102 *machine = NULL;
+	struct snd_soc_card *card;
+
+	card = &acp3x_card;
+	acp3x_card.dev = &pdev->dev;
+
+	platform_set_drvdata(pdev, card);
+	snd_soc_card_set_drvdata(card, machine);
+
+	ret = devm_snd_soc_register_card(&pdev->dev, card);
+	if (ret) {
+		dev_err(&pdev->dev,
+				"snd_soc_register_card(%s) failed: %d\n",
+				acp3x_card.name, ret);
+		return ret;
+	}
+	return 0;
+}
+
+static struct platform_driver acp3x_mach_driver = {
+	.driver = {
+		.name = "acp3x_w5102_mach",
+		.pm = &snd_soc_pm_ops,
+	},
+	.probe = acp3x_probe,
+};
+
+static int __init acp3x_audio_init(void)
+{
+	platform_driver_register(&acp3x_mach_driver);
+	return 0;
+}
+
+static void __exit acp3x_audio_exit(void)
+{
+	platform_driver_unregister(&acp3x_mach_driver);
+}
+
+module_init(acp3x_audio_init);
+module_exit(acp3x_audio_exit);
+
+MODULE_AUTHOR("Maruthi.Bayyavarapu@amd.com");
+MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/amd/raven/dummy-w5102.c b/sound/soc/amd/raven/dummy-w5102.c
new file mode 100755
index 000000000000..f766c112f559
--- /dev/null
+++ b/sound/soc/amd/raven/dummy-w5102.c
@@ -0,0 +1,93 @@
+/*
+ * dummy audio codec driver
+ *
+ * Copyright 2016 Advanced Micro Devices, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ *
+ *
+ */
+
+#include <linux/module.h>
+#include <sound/soc.h>
+
+#define W5102_RATES	SNDRV_PCM_RATE_8000_96000
+#define W5102_FORMATS	(SNDRV_PCM_FMTBIT_S16_LE | \
+			SNDRV_PCM_FMTBIT_S32_LE | \
+			SNDRV_PCM_FMTBIT_S24_LE)
+
+static const struct snd_soc_dapm_widget w5102_widgets[] = {
+	SND_SOC_DAPM_OUTPUT("dummy-w5102-out"),
+	SND_SOC_DAPM_INPUT("dummy-w5102-in"),
+};
+
+static const struct snd_soc_dapm_route w5102_routes[] = {
+	{ "dummy-w5102-out", NULL, "Playback" },
+	{ "Capture", NULL, "dummy-w5102-in" },
+};
+
+static struct snd_soc_dai_driver w5102_stub_dai = {
+	.name		= "dummy_w5102_dai",
+	.playback	= {
+		.stream_name	= "Playback",
+		.channels_min	= 2,
+		.channels_max	= 6,
+		.rates		= W5102_RATES,
+		.formats	= W5102_FORMATS,
+	},
+	.capture	= {
+		.stream_name	= "Capture",
+		.channels_min	= 2,
+		.channels_max	= 2,
+		.rates		= W5102_RATES,
+		.formats	= W5102_FORMATS,
+	},
+
+};
+
+static const struct snd_soc_component_driver soc_component_wm5102_dummy = {
+	 .dapm_widgets = w5102_widgets,
+         .num_dapm_widgets = ARRAY_SIZE(w5102_widgets),
+         .dapm_routes = w5102_routes,
+         .num_dapm_routes = ARRAY_SIZE(w5102_routes),
+};
+
+static int dummy_w5102_probe(struct platform_device *pdev)
+{
+	int ret;
+
+	ret = devm_snd_soc_register_component(&pdev->dev,
+					      &soc_component_wm5102_dummy,
+					      &w5102_stub_dai, 1);
+	return ret;
+}
+
+static struct platform_driver dummy_w5102_driver = {
+	.probe		= dummy_w5102_probe,
+	.driver		= {
+		.name	= "dummy_w5102",
+		.owner	= THIS_MODULE,
+	},
+};
+
+module_platform_driver(dummy_w5102_driver);
+
+MODULE_DESCRIPTION("dummy-w5102 dummy codec driver");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform: dummy_w5102");
-- 
2.17.1

